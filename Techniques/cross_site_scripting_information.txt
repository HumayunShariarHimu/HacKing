Cross-Site Scripting (XSS) হল একটি সাধারণ এবং বিপজ্জনক ওয়েব অ্যাপ্লিকেশন আক্রমণ যেখানে আক্রমণকারী ক্লায়েন্ট-সাইড স্ক্রিপ্ট (JavaScript, HTML, বা অন্যান্য কোড) ইনজেক্ট করে। এটি সাধারণত ব্যবহারকারী বা অন্যান্য ক্লায়েন্টদের ব্রাউজারে চলমান কোডের মাধ্যমে ঘটে। XSS আক্রমণের উদ্দেশ্য হল ব্যবহারকারীর ব্রাউজারে স্ক্রিপ্ট চালিয়ে ডাটা চুরি করা, সেশন হাইজ্যাকিং করা, বা ওয়েব অ্যাপ্লিকেশনকে ক্ষতিগ্রস্ত করা।

XSS আক্রমণের ধরন

1. Stored XSS (Persistent XSS):

Stored XSS আক্রমণে আক্রমণকারী সার্ভারে স্ক্রিপ্ট ইনজেক্ট করে যা পরে অন্যান্য ব্যবহারকারীদের দ্বারা অ্যাক্সেস করা হলে চালিত হয়।

উদাহরণস্বরূপ, যদি একটি ওয়েবসাইট ফোরামে কমেন্ট সেকশনে স্ক্রিপ্ট ইনপুট গ্রহণ করে এবং এটি সার্ভারে সংরক্ষণ করে, তাহলে যখন অন্য ব্যবহারকারী ওই কমেন্ট দেখবে, স্ক্রিপ্টটি তাদের ব্রাউজারে রান করবে।


উদাহরণ:

<script>alert('XSS Attack');</script>


2. Reflected XSS (Non-persistent XSS):

Reflected XSS আক্রমণ তখন ঘটে যখন আক্রমণকারী একটি স্ক্রিপ্ট URL প্যারামিটারে ইনজেক্ট করে এবং ওই URL অন্য ব্যবহারকারীকে পাঠায়। যখন ওই ব্যবহারকারী URL লিঙ্কটি ক্লিক করে, স্ক্রিপ্টটি তার ব্রাউজারে রিফ্লেক্ট হয় এবং চালিত হয়।

এই আক্রমণে স্ক্রিপ্টটি শুধুমাত্র একবারে চালিত হয় এবং সার্ভারে সংরক্ষিত হয় না।


উদাহরণ:

<a href="http://example.com/search?query=<script>alert('XSS')</script>">Click me</a>


3. DOM-based XSS:

DOM-based XSS আক্রমণ হয় যখন স্ক্রিপ্টটি ওয়েব পেজের DOM (Document Object Model) এ পরিবর্তন আনে, তবে এটি সার্ভারের কোনও প্রভাব ফেলবে না। এই আক্রমণে JavaScript কোড সরাসরি DOM এ ইনজেক্ট হয় এবং ব্যবহারকারীর ব্রাউজারে এটি রান করে।

উদাহরণস্বরূপ, একটি পেজ JavaScript দিয়ে প্যারামিটার লোড করে এবং সেটি ব্রাউজারে ইনজেক্ট করে।


উদাহরণ:

var user_input = window.location.search;
document.getElementById('userInput').innerHTML = user_input;



XSS আক্রমণের উদ্দেশ্য

1. ডাটা চুরি:

আক্রমণকারীরা ব্যবহারকারীর সেশনের কুকি বা অন্যান্য সংবেদনশীল তথ্য চুরি করতে পারে।



2. সেশন হাইজ্যাকিং:

XSS আক্রমণ ব্যবহারকারী সেশন কুকি চুরি করার জন্য ব্যবহৃত হতে পারে, যা পরে আক্রমণকারী তার পক্ষে ব্যবহার করতে পারে।



3. ফিশিং আক্রমণ:

XSS আক্রমণের মাধ্যমে আক্রমণকারী একটি নকল লগইন ফর্ম তৈরি করতে পারে এবং ব্যবহারকারীকে সেগুলিতে তাদের অ্যাকাউন্ট তথ্য পূরণ করতে বাধ্য করতে পারে।



4. নকল পপ-আপ এবং ইউআই পরিবর্তন:

আক্রমণকারী পপ-আপ তৈরি করে বা UI পরিবর্তন করে ব্যবহারকারীকে বিভ্রান্ত করতে পারে।



5. Malware বিতরণ:

আক্রমণকারী XSS ব্যবহার করে ক্ষতিকর স্ক্রিপ্ট লোড করতে পারে যা ব্যবহারকারীর ডিভাইসে ম্যালওয়্যার বা ভাইরাস ইনস্টল করতে পারে।




XSS আক্রমণের কৌশল এবং কার্যপ্রণালী

1. Input Validation:

আক্রমণকারী যে ইনপুট প্রদান করে তা অ্যাপ্লিকেশন সরাসরি গ্রহণ করলে XSS আক্রমণ সম্ভব হয়। তাই, ইনপুট ভ্যালিডেশন একটি গুরুত্বপূর্ণ প্রতিরোধ কৌশল।



2. Script Injection:

আক্রমণকারী ওয়েবসাইটে একটি সুনির্দিষ্ট প্যাথ বা প্যারামিটারকে খুঁজে বের করে, যেখানে স্ক্রিপ্ট ইনজেক্ট করা সম্ভব হয়, যেমন URL প্যারামিটার, ফর্ম ইনপুট, কুকি বা HTTP হেডার।



3. Script Execution:

ইনজেক্ট করা স্ক্রিপ্টের মাধ্যমে আক্রমণকারী ব্যবহারকারীর সিস্টেমে কোড চালাতে সক্ষম হয়। এটি HTML বা JavaScript দিয়ে ইনজেক্ট করা হতে পারে।




XSS আক্রমণের রক্ষা পদ্ধতি

1. ইনপুট স্যানিটাইজেশন:

ব্যবহারকারীর ইনপুট স্যানিটাইজ করা প্রয়োজন যাতে স্ক্রিপ্ট ইনজেকশন প্রতিরোধ করা যায়। সমস্ত ইনপুটে অ্যালাউড চিহ্নের জন্য ফিল্টার প্রয়োগ করা উচিত, যেমন <, >, &, ", ', এবং /।



2. HTML Encoding:

HTML এনকোডিং ব্যবহার করে ইনপুট ডাটা ব্রাউজারে সঠিকভাবে প্রদর্শন করা হয়, তবে এটি স্ক্রিপ্ট হিসেবে এক্সিকিউট হবে না।

উদাহরণ: < এর পরিবর্তে &lt; এবং > এর পরিবর্তে &gt; ব্যবহার করুন।



3. Content Security Policy (CSP):

CSP একটি নিরাপত্তা ফিচার যা ওয়েব অ্যাপ্লিকেশনকে সীমিত স্ক্রিপ্ট সোর্স থেকে কোড রান করতে বাধ্য করে, যা XSS আক্রমণ প্রতিরোধ করতে সহায়তা করে।



4. HTTPOnly এবং Secure Cookie Flags:

HTTPOnly এবং Secure ফ্ল্যাগস ব্যবহার করে কুকি গুলিকে স্ক্রিপ্টের মাধ্যমে অ্যাক্সেসযোগ্য করা থেকে বিরত রাখুন। এর ফলে স্ক্রিপ্ট কুকি চুরি করতে পারবে না।



5. Escaping Data:

যখন ডাটা ডায়নামিকভাবে HTML পেজে ইনজেক্ট হয়, তখন তা সঠিকভাবে escape করতে হবে যাতে এটি HTML বা JavaScript কোড হিসেবে এক্সিকিউট না হয়।



6. Subresource Integrity (SRI):

বাহ্যিক স্ক্রিপ্টগুলি যখন ওয়েবসাইটে লোড হয়, তখন SRI ট্যাগ ব্যবহার করে সেগুলির স্বচ্ছতা নিশ্চিত করুন যাতে স্ক্রিপ্টের মধ্যে কোনো পরিবর্তন হলে তা সরাসরি চিহ্নিত হয়।



7. Testing Tools:

নিয়মিত XSS আক্রমণের জন্য ওয়েব অ্যাপ্লিকেশনগুলি স্ক্যান করুন। যেমন, Burp Suite, OWASP ZAP, Acunetix ইত্যাদি টুলস ব্যবহার করুন।





---

XSS আক্রমণের কিছু উদাহরণ:

1. Reflected XSS:

URL প্যারামিটার ব্যবহার করে সরাসরি স্ক্রিপ্ট ইনজেক্ট করা হয়। উদাহরণ:


<a href="http://example.com/search?q=<script>alert('XSS');</script>">Click me</a>


2. Stored XSS:

কমেন্ট ফর্মে স্ক্রিপ্ট ইনজেক্ট করা হয় এবং তা সার্ভারে স্টোর করা হয়। পরবর্তীতে যে কেউ ওই কমেন্ট দেখলে স্ক্রিপ্টটি এক্সিকিউট হবে।


<script>alert('Stored XSS');</script>


3. DOM-based XSS:

JavaScript মাধ্যমে DOM এ স্ক্রিপ্ট ইনজেক্ট করা হয়। উদাহরণ:


document.getElementById('output').innerHTML = location.search;



XSS আক্রমণ থেকে নিরাপত্তা পেতে কিছু গুরুত্বপূর্ণ টিপস:

ব্যবহারকারীর ইনপুট কখনই সরাসরি HTML, JavaScript, বা ডাটাবেসে গ্রহণ করবেন না। সবসময় ইনপুট স্যানিটাইজ এবং ভ্যালিডেট করুন।

সমস্ত স্ক্রিপ্ট ইনপুট ডাটাকে সঠিকভাবে escape করুন, বিশেষ করে HTML, JavaScript, CSS এবং URL প্যারামিটারগুলোকে।

Content Security Policy (CSP) প্রয়োগ করুন।

নিরাপদে কুকি ব্যবহার করুন এবং HTTPOnly ও Secure ফ্ল্যাগস যোগ করুন।


উপসংহার: XSS আক্রমণ ওয়েব অ্যাপ্লিকেশনগুলির জন্য একটি বড় ঝুঁকি তৈরি করতে পারে, তবে সঠিক নিরাপত্তা পদক্ষেপগুলি গ্রহণ করে এটি প্রতিরোধ করা সম্ভব।

